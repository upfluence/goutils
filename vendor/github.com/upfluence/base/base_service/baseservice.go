// Autogenerated by Thrift Compiler (2.0.2-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base_service

import (
	"bytes"
	"fmt"
	"github.com/upfluence/base/version"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal
var _ = version.GoUnusedProtection__

type BaseService interface {
	GetName(ctx thrift.Context) (res string, err error)
	GetVersion(ctx thrift.Context) (res *version.Version, err error)
	GetInterfaceVersions(ctx thrift.Context) (res map[string]*version.Version, err error)
	GetStatus(ctx thrift.Context) (res Status, err error)
	AliveSince(ctx thrift.Context) (res int64, err error)
}

type BaseServiceClient struct {
	thrift.TClient
}

func NewBaseServiceClientFactoryProvider(p thrift.TClientProvider) (*BaseServiceClient, error) {
	cl, err := p.Build("base.base_service", "BaseService")

	if err != nil {
		return nil, err
	}

	return NewBaseServiceClient(cl), nil
}

func NewBaseServiceClient(cl thrift.TClient) *BaseServiceClient {
	return &BaseServiceClient{TClient: cl}
}

func (p *BaseServiceClient) GetName(ctx thrift.Context) (res string, err error) {
	args := BaseServiceGetNameArgs{}
	result := BaseServiceGetNameResult{}
	if err = p.CallBinary(ctx, "getName", &args, &result); err != nil {
		return res, err
	}

	return result.GetSuccess(), nil
}

func (p *BaseServiceClient) GetVersion(ctx thrift.Context) (res *version.Version, err error) {
	args := BaseServiceGetVersionArgs{}
	result := BaseServiceGetVersionResult{}
	if err = p.CallBinary(ctx, "getVersion", &args, &result); err != nil {
		return res, err
	}

	return result.GetSuccess(), nil
}

func (p *BaseServiceClient) GetInterfaceVersions(ctx thrift.Context) (res map[string]*version.Version, err error) {
	args := BaseServiceGetInterfaceVersionsArgs{}
	result := BaseServiceGetInterfaceVersionsResult{}
	if err = p.CallBinary(ctx, "getInterfaceVersions", &args, &result); err != nil {
		return res, err
	}

	return result.GetSuccess(), nil
}

func (p *BaseServiceClient) GetStatus(ctx thrift.Context) (res Status, err error) {
	args := BaseServiceGetStatusArgs{}
	result := BaseServiceGetStatusResult{}
	if err = p.CallBinary(ctx, "getStatus", &args, &result); err != nil {
		return res, err
	}

	return result.GetSuccess(), nil
}

func (p *BaseServiceClient) AliveSince(ctx thrift.Context) (res int64, err error) {
	args := BaseServiceAliveSinceArgs{}
	result := BaseServiceAliveSinceResult{}
	if err = p.CallBinary(ctx, "aliveSince", &args, &result); err != nil {
		return res, err
	}

	return result.GetSuccess(), nil
}

func NewBaseServiceProcessorProvider(handler BaseService, provider thrift.TProcessorProvider) (thrift.TProcessor, error) {
	p, err := provider.Build("base.base_service", "BaseService")
	if err != nil {
		return nil, err
	}

	return NewBaseServiceProcessorFactory(handler, p), nil
}

func NewBaseServiceProcessor(handler BaseService, middlewares []thrift.TMiddleware) thrift.TProcessor {
	p := thrift.NewTStandardProcessor(middlewares)
	return NewBaseServiceProcessorFactory(handler, p)
}

func NewBaseServiceProcessorFactory(handler BaseService, p thrift.TProcessor) thrift.TProcessor {
	p.AddProcessor(
		"getName",
		thrift.NewTBinaryProcessorFunction(p, "getName", func() thrift.TRequest { return &BaseServiceGetNameArgs{} }, &baseServiceProcessorGetName{handler: handler}),
	)
	p.AddProcessor(
		"getVersion",
		thrift.NewTBinaryProcessorFunction(p, "getVersion", func() thrift.TRequest { return &BaseServiceGetVersionArgs{} }, &baseServiceProcessorGetVersion{handler: handler}),
	)
	p.AddProcessor(
		"getInterfaceVersions",
		thrift.NewTBinaryProcessorFunction(p, "getInterfaceVersions", func() thrift.TRequest { return &BaseServiceGetInterfaceVersionsArgs{} }, &baseServiceProcessorGetInterfaceVersions{handler: handler}),
	)
	p.AddProcessor(
		"getStatus",
		thrift.NewTBinaryProcessorFunction(p, "getStatus", func() thrift.TRequest { return &BaseServiceGetStatusArgs{} }, &baseServiceProcessorGetStatus{handler: handler}),
	)
	p.AddProcessor(
		"aliveSince",
		thrift.NewTBinaryProcessorFunction(p, "aliveSince", func() thrift.TRequest { return &BaseServiceAliveSinceArgs{} }, &baseServiceProcessorAliveSince{handler: handler}),
	)
	return p
}

type baseServiceProcessorGetName struct {
	handler BaseService
}

func (p *baseServiceProcessorGetName) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	retval, err2 := p.handler.GetName(ctx)
	result := &BaseServiceGetNameResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type baseServiceProcessorGetVersion struct {
	handler BaseService
}

func (p *baseServiceProcessorGetVersion) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	retval, err2 := p.handler.GetVersion(ctx)
	result := &BaseServiceGetVersionResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type baseServiceProcessorGetInterfaceVersions struct {
	handler BaseService
}

func (p *baseServiceProcessorGetInterfaceVersions) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	retval, err2 := p.handler.GetInterfaceVersions(ctx)
	result := &BaseServiceGetInterfaceVersionsResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

type baseServiceProcessorGetStatus struct {
	handler BaseService
}

func (p *baseServiceProcessorGetStatus) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	retval, err2 := p.handler.GetStatus(ctx)
	result := &BaseServiceGetStatusResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

type baseServiceProcessorAliveSince struct {
	handler BaseService
}

func (p *baseServiceProcessorAliveSince) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	retval, err2 := p.handler.AliveSince(ctx)
	result := &BaseServiceAliveSinceResult{}
	if err2 != nil {
		return nil, err2
	}

	result.Success = &retval
	return result, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type BaseServiceGetNameArgs struct {
}

func NewBaseServiceGetNameArgs() *BaseServiceGetNameArgs {
	return &BaseServiceGetNameArgs{}
}

func (p *BaseServiceGetNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetNameArgs({})",
	)
}

func (p *BaseServiceGetNameResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *BaseServiceGetNameResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type BaseServiceGetNameResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewBaseServiceGetNameResult() *BaseServiceGetNameResult {
	return &BaseServiceGetNameResult{}
}

var BaseServiceGetNameResult_Success_DEFAULT string

func (p *BaseServiceGetNameResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return BaseServiceGetNameResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *BaseServiceGetNameResult) SetSuccess(v string) {
	p.Success = &v
}
func (p *BaseServiceGetNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceGetNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BaseServiceGetNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BaseServiceGetNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetNameResult({success: %v})",
		p.GetSuccess(),
	)
}

type BaseServiceGetVersionArgs struct {
}

func NewBaseServiceGetVersionArgs() *BaseServiceGetVersionArgs {
	return &BaseServiceGetVersionArgs{}
}

func (p *BaseServiceGetVersionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetVersionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVersion_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetVersionArgs({})",
	)
}

func (p *BaseServiceGetVersionResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *BaseServiceGetVersionResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type BaseServiceGetVersionResult struct {
	Success *version.Version `thrift:"success,0" json:"success,omitempty"`
}

func NewBaseServiceGetVersionResult() *BaseServiceGetVersionResult {
	return &BaseServiceGetVersionResult{}
}

var BaseServiceGetVersionResult_Success_DEFAULT *version.Version

func (p *BaseServiceGetVersionResult) GetSuccess() *version.Version {
	if !p.IsSetSuccess() {
		return BaseServiceGetVersionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BaseServiceGetVersionResult) SetSuccess(v *version.Version) {
	p.Success = v
}
func (p *BaseServiceGetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceGetVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = version.NewVersion()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BaseServiceGetVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVersion_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BaseServiceGetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetVersionResult({success: %v})",
		p.GetSuccess(),
	)
}

type BaseServiceGetInterfaceVersionsArgs struct {
}

func NewBaseServiceGetInterfaceVersionsArgs() *BaseServiceGetInterfaceVersionsArgs {
	return &BaseServiceGetInterfaceVersionsArgs{}
}

func (p *BaseServiceGetInterfaceVersionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetInterfaceVersionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInterfaceVersions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetInterfaceVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetInterfaceVersionsArgs({})",
	)
}

func (p *BaseServiceGetInterfaceVersionsResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *BaseServiceGetInterfaceVersionsResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type BaseServiceGetInterfaceVersionsResult struct {
	Success map[string]*version.Version `thrift:"success,0" json:"success,omitempty"`
}

func NewBaseServiceGetInterfaceVersionsResult() *BaseServiceGetInterfaceVersionsResult {
	return &BaseServiceGetInterfaceVersionsResult{}
}

var BaseServiceGetInterfaceVersionsResult_Success_DEFAULT map[string]*version.Version

func (p *BaseServiceGetInterfaceVersionsResult) GetSuccess() map[string]*version.Version {
	return p.Success
}

func (p *BaseServiceGetInterfaceVersionsResult) SetSuccess(v map[string]*version.Version) {
	p.Success = v
}
func (p *BaseServiceGetInterfaceVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceGetInterfaceVersionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetInterfaceVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*version.Version, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		_val1 := version.NewVersion()
		if err := _val1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val1), err)
		}
		p.Success[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BaseServiceGetInterfaceVersionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getInterfaceVersions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetInterfaceVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BaseServiceGetInterfaceVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetInterfaceVersionsResult({success: %v})",
		p.GetSuccess(),
	)
}

type BaseServiceGetStatusArgs struct {
}

func NewBaseServiceGetStatusArgs() *BaseServiceGetStatusArgs {
	return &BaseServiceGetStatusArgs{}
}

func (p *BaseServiceGetStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetStatusArgs({})",
	)
}

func (p *BaseServiceGetStatusResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *BaseServiceGetStatusResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type BaseServiceGetStatusResult struct {
	Success *Status `thrift:"success,0" json:"success,omitempty"`
}

func NewBaseServiceGetStatusResult() *BaseServiceGetStatusResult {
	return &BaseServiceGetStatusResult{}
}

var BaseServiceGetStatusResult_Success_DEFAULT Status

func (p *BaseServiceGetStatusResult) GetSuccess() Status {
	if !p.IsSetSuccess() {
		return BaseServiceGetStatusResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *BaseServiceGetStatusResult) SetSuccess(v Status) {
	p.Success = &v
}
func (p *BaseServiceGetStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceGetStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceGetStatusResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := Status(v)
		p.Success = &temp
	}
	return nil
}

func (p *BaseServiceGetStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceGetStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BaseServiceGetStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceGetStatusResult({success: %v})",
		p.GetSuccess(),
	)
}

type BaseServiceAliveSinceArgs struct {
}

func NewBaseServiceAliveSinceArgs() *BaseServiceAliveSinceArgs {
	return &BaseServiceAliveSinceArgs{}
}

func (p *BaseServiceAliveSinceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceAliveSinceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aliveSince_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceAliveSinceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceAliveSinceArgs({})",
	)
}

func (p *BaseServiceAliveSinceResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *BaseServiceAliveSinceResult) GetError() error {
	return nil

}

// Attributes:
//  - Success
type BaseServiceAliveSinceResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewBaseServiceAliveSinceResult() *BaseServiceAliveSinceResult {
	return &BaseServiceAliveSinceResult{}
}

var BaseServiceAliveSinceResult_Success_DEFAULT int64

func (p *BaseServiceAliveSinceResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return BaseServiceAliveSinceResult_Success_DEFAULT
	}
	return *p.Success
}

func (p *BaseServiceAliveSinceResult) SetSuccess(v int64) {
	p.Success = &v
}
func (p *BaseServiceAliveSinceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BaseServiceAliveSinceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseServiceAliveSinceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BaseServiceAliveSinceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aliveSince_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseServiceAliveSinceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BaseServiceAliveSinceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"BaseServiceAliveSinceResult({success: %v})",
		p.GetSuccess(),
	)
}

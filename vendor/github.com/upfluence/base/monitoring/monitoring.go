// Autogenerated by Thrift Compiler (2.1.1-upfluence)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package monitoring

import (
	"bytes"
	"fmt"
	"github.com/upfluence/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Monitoring interface {
	// Parameters:
	//  - Metrics
	Collect(ctx thrift.Context, metrics []MetricID) (res Metrics, err error)
}

type MonitoringClient struct {
	thrift.TClient
}

func NewMonitoringClientFactoryProvider(p thrift.TClientProvider) (*MonitoringClient, error) {
	cl, err := p.Build("", "Monitoring")

	if err != nil {
		return nil, err
	}

	return NewMonitoringClient(cl), nil
}

func NewMonitoringClient(cl thrift.TClient) *MonitoringClient {
	return &MonitoringClient{TClient: cl}
}

// Parameters:
//  - Metrics
func (p *MonitoringClient) Collect(ctx thrift.Context, metrics []MetricID) (res Metrics, err error) {
	args := MonitoringCollectArgs{
		Metrics: metrics,
	}
	result := MonitoringCollectResult{}
	if err = p.CallBinary(ctx, "collect", &args, &result); err != nil {
		return res, err
	}

	if result.ServiceUnavailable != nil {
		return res, result.ServiceUnavailable
	} else if result.UnknownMetric != nil {
		return res, result.UnknownMetric
	}
	return result.GetSuccess(), nil
}

func NewMonitoringProcessorProvider(handler Monitoring, provider thrift.TProcessorProvider) (thrift.TProcessor, error) {
	p, err := provider.Build("", "Monitoring")
	if err != nil {
		return nil, err
	}

	return NewMonitoringProcessorFactory(handler, p), nil
}

func NewMonitoringProcessor(handler Monitoring, middlewares []thrift.TMiddleware) thrift.TProcessor {
	p := thrift.NewTStandardProcessor(middlewares)
	return NewMonitoringProcessorFactory(handler, p)
}

func NewMonitoringProcessorFactory(handler Monitoring, p thrift.TProcessor) thrift.TProcessor {
	p.AddProcessor(
		"collect",
		thrift.NewTBinaryProcessorFunction(p, "collect", func() thrift.TRequest { return &MonitoringCollectArgs{} }, &monitoringProcessorCollect{handler: handler}),
	)
	return p
}

type monitoringProcessorCollect struct {
	handler Monitoring
}

func (p *monitoringProcessorCollect) Handle(ctx thrift.Context, req thrift.TRequest) (thrift.TResponse, error) {
	args := req.(*MonitoringCollectArgs)
	retval, err2 := p.handler.Collect(ctx, args.Metrics)
	result := &MonitoringCollectResult{}
	if err2 != nil {
		switch v := thrift.Cause(err2).(type) {
		case *ServiceNotAvailable:
			result.ServiceUnavailable = v
			return result, nil
		case *UnknownMetric:
			result.UnknownMetric = v
			return result, nil
		}
		return nil, err2
	}

	result.Success = retval
	return result, nil
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Metrics
type MonitoringCollectArgs struct {
	Metrics []MetricID `thrift:"metrics,1" json:"metrics"`
}

func NewMonitoringCollectArgs() *MonitoringCollectArgs {
	return &MonitoringCollectArgs{}
}

func (p *MonitoringCollectArgs) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "", Name: "collect_args"}
}

func (p *MonitoringCollectArgs) GetMetrics() []MetricID {
	return p.Metrics
}

func (p *MonitoringCollectArgs) SetMetrics(v []MetricID) {
	p.Metrics = v
}
func (p *MonitoringCollectArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MonitoringCollectArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]MetricID, 0, size)
	p.Metrics = tSlice
	for i := 0; i < size; i++ {
		var _elem0 MetricID
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := MetricID(v)
			_elem0 = temp
		}
		p.Metrics = append(p.Metrics, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MonitoringCollectArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("collect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MonitoringCollectArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metrics", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metrics: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Metrics)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Metrics {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metrics: ", p), err)
	}
	return err
}

func (p *MonitoringCollectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"MonitoringCollectArgs({metrics: %v})",
		p.GetMetrics(),
	)
}

func (p *MonitoringCollectResult) GetResult() interface{} {
	return p.GetSuccess()
}

func (p *MonitoringCollectResult) GetError() error {
	if p.ServiceUnavailable != nil {
		return p.ServiceUnavailable
	}

	if p.UnknownMetric != nil {
		return p.UnknownMetric
	}

	return nil

}

// Attributes:
//  - Success
//  - ServiceUnavailable
//  - UnknownMetric
type MonitoringCollectResult struct {
	Success            Metrics              `thrift:"success,0" json:"success,omitempty"`
	ServiceUnavailable *ServiceNotAvailable `thrift:"serviceUnavailable,1" json:"serviceUnavailable,omitempty"`
	UnknownMetric      *UnknownMetric       `thrift:"unknownMetric,2" json:"unknownMetric,omitempty"`
}

func NewMonitoringCollectResult() *MonitoringCollectResult {
	return &MonitoringCollectResult{}
}

func (p *MonitoringCollectResult) StructDefinition() thrift.StructDefinition {
	return thrift.StructDefinition{Namespace: "", Name: "collect_result"}
}

var MonitoringCollectResult_Success_DEFAULT Metrics

func (p *MonitoringCollectResult) GetSuccess() Metrics {
	return p.Success
}

func (p *MonitoringCollectResult) SetSuccess(v Metrics) {
	p.Success = v
}

var MonitoringCollectResult_ServiceUnavailable_DEFAULT *ServiceNotAvailable

func (p *MonitoringCollectResult) GetServiceUnavailable() *ServiceNotAvailable {
	if !p.IsSetServiceUnavailable() {
		return MonitoringCollectResult_ServiceUnavailable_DEFAULT
	}
	return p.ServiceUnavailable
}

func (p *MonitoringCollectResult) SetServiceUnavailable(v *ServiceNotAvailable) {
	p.ServiceUnavailable = v
}

var MonitoringCollectResult_UnknownMetric_DEFAULT *UnknownMetric

func (p *MonitoringCollectResult) GetUnknownMetric() *UnknownMetric {
	if !p.IsSetUnknownMetric() {
		return MonitoringCollectResult_UnknownMetric_DEFAULT
	}
	return p.UnknownMetric
}

func (p *MonitoringCollectResult) SetUnknownMetric(v *UnknownMetric) {
	p.UnknownMetric = v
}
func (p *MonitoringCollectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MonitoringCollectResult) IsSetServiceUnavailable() bool {
	return p.ServiceUnavailable != nil
}

func (p *MonitoringCollectResult) IsSetUnknownMetric() bool {
	return p.UnknownMetric != nil
}

func (p *MonitoringCollectResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MonitoringCollectResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(Metrics, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key1 MetricID
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := MetricID(v)
			_key1 = temp
		}
		var _val2 float64
		if v, err := iprot.ReadDouble(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val2 = v
		}
		p.Success[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MonitoringCollectResult) ReadField1(iprot thrift.TProtocol) error {
	p.ServiceUnavailable = NewServiceNotAvailable()
	if err := p.ServiceUnavailable.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceUnavailable), err)
	}
	return nil
}

func (p *MonitoringCollectResult) ReadField2(iprot thrift.TProtocol) error {
	p.UnknownMetric = NewUnknownMetric()
	if err := p.UnknownMetric.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownMetric), err)
	}
	return nil
}

func (p *MonitoringCollectResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("collect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MonitoringCollectResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MonitoringCollectResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceUnavailable() {
		if err := oprot.WriteFieldBegin("serviceUnavailable", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceUnavailable: ", p), err)
		}
		if err := p.ServiceUnavailable.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceUnavailable), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceUnavailable: ", p), err)
		}
	}
	return err
}

func (p *MonitoringCollectResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnknownMetric() {
		if err := oprot.WriteFieldBegin("unknownMetric", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unknownMetric: ", p), err)
		}
		if err := p.UnknownMetric.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownMetric), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unknownMetric: ", p), err)
		}
	}
	return err
}

func (p *MonitoringCollectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf(
		"MonitoringCollectResult({success: %v, serviceUnavailable: %v, unknownMetric: %v})",
		p.GetSuccess(),
		p.GetServiceUnavailable(),
		p.GetUnknownMetric(),
	)
}
